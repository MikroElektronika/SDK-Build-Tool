name: Build SDK With Options

on:
  workflow_dispatch:
    inputs:
      build_type:
        type: choice
        description: Choose the Type of the build
        options:
          - "Bare Metal"
          - "SDK from Branch"
          - "SDK from test release"
        default: "Pick an option"
      build_branch:
        type: string
        description: Provide the mikrosdk_v2 branch (if SDK from Branch was chosen)
        default: "main"
      build_components:
        type: choice
        description: Choose the components for the build
        options:
          - "MCUs only"
          - "Cards only"
          - "Boards only"
          - "Boards + Displays"
        default: "Pick an option"
      compilers:
        type: string
        description: Choose compiler(s) for building
        default: "gcc_arm_none_eabi, clang-llvm, mikrocarm, mikrocavr, mchp_xc16, mikrocdspic, mchp_xc32, mikrocpic32, mchp_xc8, mikrocpic, xpack_riscv_none_embed_gcc, clang_llvm_riscv"

env:
  NECTO_DOWNLOAD_URL: ${{ secrets.NECTO_LIVE_DOWNLOAD_URL }}

jobs:
  build_sdk:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc_arm_none_eabi, clang-llvm, mikrocarm, mikrocavr, mchp_xc16, mikrocdspic, mchp_xc32, mikrocpic32, mchp_xc8, mikrocpic, xpack_riscv_none_embed_gcc, clang_llvm_riscv]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Filter Compilers
        id: filter
        run: |
          selected_compilers="${{ github.event.inputs.compilers }}"
          IFS=',' read -r -a compilers_array <<< "$selected_compilers"
          found=false
          for compiler in "${compilers_array[@]}"; do
            trimmed_compiler=$(echo "$compiler" | xargs)
            if [ "$trimmed_compiler" == "${{ matrix.compiler }}" ]; then
              found=true
              break
            fi
          done
          echo "found=$found" >> $GITHUB_ENV

      - name: Exit if Not Selected
        if: env.found != 'true'
        run: echo "Skipping job for compiler ${{ matrix.compiler }}"

      - name: Install Dependencies
        if: env.found == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements/shared.txt
          pip install -r scripts/requirements/databases.txt
          pip install colorama
          pip install enums
          sudo apt-get update
          sudo apt-get install $(cat scripts/requirements/recursive_build.txt)

      - name: Install NECTO
        if: env.found == 'true'
        env:
          COMPILER: ${{ matrix.compiler }}
        run: |
          python -u scripts/install_necto.py

      - name: Run Recursive Build
        if: env.found == 'true'
        run: |
          echo "Building with compiler: ${{ matrix.compiler }}"
          python -u scripts/sdk_build_with_options.py \
            "${{ github.event.inputs.build_type }}" \
            "${{ github.event.inputs.build_branch }}" \
            "${{ github.event.inputs.build_components }}" \
            "${{ matrix.compiler }}"

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.compiler }}-test-results
          path: /home/runner/recursive_test_results
