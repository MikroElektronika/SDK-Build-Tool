name: Verify NECTO and Package Assets

on:
  workflow_dispatch:

  schedule:
    - cron: "0 4 * * 1-5"   # 06:00, Monday–Friday
    - cron: "0 9 * * 1-5"   # 11:00, Monday–Friday
    - cron: "0 13 * * 1-5"  # 15:00, Monday–Friday

env:
  ES_HOST: ${{ secrets.ES_HOST }}
  ES_USER: ${{ secrets.ES_USER }}
  ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
  ES_INDEX_LIVE: ${{ secrets.ES_INDEX_LIVE }}
  GITHUB_REPO: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  necto_verification:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            python: '3.12'
          - os: ubuntu-latest
            python: '3.x'
          - os: macos-latest
            python: '3.x'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Ubuntu runtime deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full
          sudo apt-get install libopus-dev
          sudo apt-get install libevent-dev
          sudo apt-get install freeglut3-dev
          sudo apt-get install libminizip-dev
          sudo apt-get install libxcb-shape0-dev
          sudo apt-get install libxcb-icccm4-dev
          sudo apt-get install libxcb-cursor-dev
          sudo apt-get install libxcb-keysyms1-dev
          sudo apt-get install libxkbcommon-x11-dev

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements/shared.txt
          pip install -r scripts/requirements/databases.txt

      - name: Step 1 - Install NECTO Studio
        run: |
          python -u scripts/necto_packages_check.py "step1"

      - name: Step 2 - Install all packages with NECTO installer
        run: |
          python -u scripts/necto_packages_check.py "step2"

      - name: Step 3 - Create dependencies between MCUs, Boards, Cards and packages from Step 2
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step3"

      - name: Step 4 - Check if all CORE-to-MCU dependencies are correct
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step4"

      - name: Step 5 - Check if all CODEGRIP-to-MCU dependencies are correct
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step5"

      - name: Step 6 - Check if all MCHP-to-MCU dependencies are correct
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step6"

      - name: Step 7 - Check if all Board-to-BSP dependencies are correct
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step7"

      - name: Step 8 - Check if all Card-to-BSP dependencies are correct
        if: always()
        run: |
          python -u scripts/necto_packages_check.py "step8"

      - name: Message and dependencies files as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            package_dependencies.json
            message.txt
            scripts/necto_utils/results.html

      - name: Send notification to Mattermost
        if: always() && matrix.os != 'windows-latest'
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL_TEST }}
        run: |
          MESSAGE=$(cat message.txt)
          curl -X POST -H 'Content-Type: application/json' \
          --data "{\"text\": \"$MESSAGE\"}" \
          $MATTERMOST_WEBHOOK_URL

      - name: Send notification to Mattermost (Windows)
        if: always() && matrix.os == 'windows-latest'
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL_TEST }}
        run: |
          $MESSAGE = Get-Content -Raw message.txt
          $WEBHOOK = $env:MATTERMOST_WEBHOOK_URL
          # Build JSON safely (escapes quotes/newlines)
          $payload = @{ text = $MESSAGE } | ConvertTo-Json -Compress
          curl.exe -X POST `
            -H 'Content-Type: application/json' `
            -d $payload `
            $WEBHOOK
